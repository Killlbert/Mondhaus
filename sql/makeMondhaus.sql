-- MySQL Script generated by MySQL Workbench
-- Do 09 Apr 2015 20:34:32 CEST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mondhaus
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mondhaus` ;

-- -----------------------------------------------------
-- Schema mondhaus
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mondhaus` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `mondhaus` ;

-- -----------------------------------------------------
-- Table `mondhaus`.`a_adressen`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`a_adressen` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`a_adressen` (
  `a_anr` INT NOT NULL,
  `a_strasse` VARCHAR(30) NULL,
  `a_plz` INT NULL,
  `a_ort` VARCHAR(20) NULL,
  PRIMARY KEY (`a_anr`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`p_personen`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`p_personen` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`p_personen` (
  `p_pnr` INT NOT NULL,
  `p_nachname` VARCHAR(20) NULL,
  `p_vorname` VARCHAR(15) NULL,
  `p_a_anr` INT NOT NULL,
  `p_geschlecht` TINYINT(1) NULL,
  PRIMARY KEY (`p_pnr`),
  INDEX `fk_p_personen_a_adressen_idx` (`p_a_anr` ASC),
  CONSTRAINT `fk_p_personen_a_adressen`
    FOREIGN KEY (`p_a_anr`)
    REFERENCES `mondhaus`.`a_adressen` (`a_anr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`k_kunden`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`k_kunden` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`k_kunden` (
  `k_seit` DATE NULL,
  `k_status` TINYINT(1) NULL,
  `k_p_pnr` INT NOT NULL,
  PRIMARY KEY (`k_p_pnr`),
  CONSTRAINT `fk_k_kunden_p_personen1`
    FOREIGN KEY (`k_p_pnr`)
    REFERENCES `mondhaus`.`p_personen` (`p_pnr`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`an_anbieter`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`an_anbieter` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`an_anbieter` (
  `an_p_pnr` INT NOT NULL,
  PRIMARY KEY (`an_p_pnr`),
  CONSTRAINT `fk_an_anbieter_p_personen1`
    FOREIGN KEY (`an_p_pnr`)
    REFERENCES `mondhaus`.`p_personen` (`p_pnr`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`g_genre`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`g_genre` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`g_genre` (
  `g_gid` CHAR(3) NOT NULL,
  `g_bezeichnung` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`g_gid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`st_stuecke`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`st_stuecke` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`st_stuecke` (
  `st_titel` VARCHAR(30) NOT NULL,
  `st_regisseur` VARCHAR(15) NULL,
  `st_g_gid` CHAR(3) NOT NULL,
  PRIMARY KEY (`st_titel`),
  INDEX `fk_st_stuecke_g_genre1_idx` (`st_g_gid` ASC),
  CONSTRAINT `fk_st_stuecke_g_genre1`
    FOREIGN KEY (`st_g_gid`)
    REFERENCES `mondhaus`.`g_genre` (`g_gid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`s_saele`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`s_saele` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`s_saele` (
  `s_snr` INT NOT NULL,
  `s_name` VARCHAR(20) NULL,
  `s_an_annr` INT NOT NULL,
  `s_an_p_pnr` INT NOT NULL,
  PRIMARY KEY (`s_snr`, `s_an_annr`),
  INDEX `fk_s_saele_an_anbieter1_idx` (`s_an_p_pnr` ASC),
  CONSTRAINT `fk_s_saele_an_anbieter1`
    FOREIGN KEY (`s_an_p_pnr`)
    REFERENCES `mondhaus`.`an_anbieter` (`an_p_pnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`v_vorstellungen`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`v_vorstellungen` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`v_vorstellungen` (
  `v_vnr` INT NOT NULL,
  `v_st_titel` VARCHAR(30) NOT NULL,
  `v_s_snr` INT NOT NULL,
  `v_s_an_annr` INT NOT NULL,
  `v_datum` DATE NULL,
  `v_beginn` CHAR(5) NULL,
  `v_ende` CHAR(5) NULL,
  PRIMARY KEY (`v_vnr`),
  INDEX `fk_v_vorstellungen_st_stuecke1_idx` (`v_st_titel` ASC),
  INDEX `fk_v_vorstellungen_s_saele1_idx` (`v_s_snr` ASC, `v_s_an_annr` ASC),
  CONSTRAINT `fk_v_vorstellungen_st_stuecke1`
    FOREIGN KEY (`v_st_titel`)
    REFERENCES `mondhaus`.`st_stuecke` (`st_titel`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_v_vorstellungen_s_saele1`
    FOREIGN KEY (`v_s_snr` , `v_s_an_annr`)
    REFERENCES `mondhaus`.`s_saele` (`s_snr` , `s_an_annr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`z_zielgruppen`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`z_zielgruppen` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`z_zielgruppen` (
  `z_p_pnr` INT NOT NULL,
  `z_g_gid` CHAR(3) NOT NULL,
  PRIMARY KEY (`z_p_pnr`),
  INDEX `fk_z_zielgruppen_p_personen1_idx` (`z_p_pnr` ASC),
  INDEX `fk_z_zielgruppen_g_genre1_idx` (`z_g_gid` ASC),
  CONSTRAINT `fk_z_zielgruppen_p_personen1`
    FOREIGN KEY (`z_p_pnr`)
    REFERENCES `mondhaus`.`p_personen` (`p_pnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_z_zielgruppen_g_genre1`
    FOREIGN KEY (`z_g_gid`)
    REFERENCES `mondhaus`.`g_genre` (`g_gid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`ka_kategorien`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`ka_kategorien` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`ka_kategorien` (
  `ka_kaid` CHAR(5) NOT NULL,
  `ka_bezeichnung` VARCHAR(10) NULL,
  `ka_preis` DECIMAL NULL,
  PRIMARY KEY (`ka_kaid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`sit_sitzplaetze`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`sit_sitzplaetze` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`sit_sitzplaetze` (
  `sit_reihe` INT NOT NULL,
  `sit_sitnr` INT NOT NULL,
  `sit_s_snr` INT NOT NULL,
  `sit_ka_kaid` CHAR(5) NOT NULL,
  PRIMARY KEY (`sit_reihe`, `sit_sitnr`, `sit_s_snr`),
  INDEX `fk_sit_sitzplaetze_s_saele1_idx` (`sit_s_snr` ASC),
  INDEX `fk_sit_sitzplaetze_ka_kategorien1_idx` (`sit_ka_kaid` ASC),
  CONSTRAINT `fk_sit_sitzplaetze_s_saele1`
    FOREIGN KEY (`sit_s_snr`)
    REFERENCES `mondhaus`.`s_saele` (`s_snr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_sit_sitzplaetze_ka_kategorien1`
    FOREIGN KEY (`sit_ka_kaid`)
    REFERENCES `mondhaus`.`ka_kategorien` (`ka_kaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`r_reservierungen`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`r_reservierungen` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`r_reservierungen` (
  `r_v_vnr` INT NOT NULL,
  `r_k_p_pnr` INT NOT NULL,
  `r_sit_reihe` INT NOT NULL,
  `r_sit_sitnr` INT NOT NULL,
  `r_sit_s_snr` INT NOT NULL,
  `r_anzahl` INT NULL,
  PRIMARY KEY (`r_v_vnr`, `r_k_p_pnr`),
  INDEX `fk_v_vorstellungen_has_k_kunden_k_kunden1_idx` (`r_k_p_pnr` ASC),
  INDEX `fk_v_vorstellungen_has_k_kunden_v_vorstellungen1_idx` (`r_v_vnr` ASC),
  INDEX `fk_v_vorstellungen_has_k_kunden_sit_sitzplaetze1_idx` (`r_sit_reihe` ASC, `r_sit_sitnr` ASC, `r_sit_s_snr` ASC),
  CONSTRAINT `fk_v_vorstellungen_has_k_kunden_v_vorstellungen1`
    FOREIGN KEY (`r_v_vnr`)
    REFERENCES `mondhaus`.`v_vorstellungen` (`v_vnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_v_vorstellungen_has_k_kunden_k_kunden1`
    FOREIGN KEY (`r_k_p_pnr`)
    REFERENCES `mondhaus`.`k_kunden` (`k_p_pnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_v_vorstellungen_has_k_kunden_sit_sitzplaetze1`
    FOREIGN KEY (`r_sit_reihe` , `r_sit_sitnr` , `r_sit_s_snr`)
    REFERENCES `mondhaus`.`sit_sitzplaetze` (`sit_reihe` , `sit_sitnr` , `sit_s_snr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mondhaus`.`i_interessen`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mondhaus`.`i_interessen` ;

CREATE TABLE IF NOT EXISTS `mondhaus`.`i_interessen` (
  `i_g_gid` CHAR(3) NOT NULL,
  `i_k_p_pnr` INT NOT NULL,
  PRIMARY KEY (`i_g_gid`, `i_k_p_pnr`),
  INDEX `fk_i_interessen_has_k_kunden_k_kunden1_idx` (`i_k_p_pnr` ASC),
  INDEX `fk_i_interessen_has_k_kunden_i_interessen1_idx` (`i_g_gid` ASC),
  CONSTRAINT `fk_i_interessen_has_k_kunden_i_interessen1`
    FOREIGN KEY (`i_g_gid`)
    REFERENCES `mondhaus`.`g_genre` (`g_gid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_i_interessen_has_k_kunden_k_kunden1`
    FOREIGN KEY (`i_k_p_pnr`)
    REFERENCES `mondhaus`.`k_kunden` (`k_p_pnr`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `mondhaus` ;

-- -----------------------------------------------------
-- procedure st_f_addStuecke
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`st_f_addStuecke`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE st_f_addStuecke (
  IN
  st_titel VARCHAR(30),
  st_regisseur VARCHAR(15),
  st_g_gid CHAR(3)
)

BEGIN
  -- SET foreign_key_checks = 0;

  INSERT INTO st_stuecke (
    st_titel,
    st_regisseur,
    st_g_gid
  ) 
    VALUES (
      st_titel,
      st_regisseur,
      st_g_gid
    );
    
 -- SET foreign_key_checks = 1;
    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure an_f_setAnbieterAt
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`an_f_setAnbieterAt`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE an_f_setAnbieterAt (
  IN
  p_pnr INT,
  p_nachname VARCHAR(20),
  p_vorname VARCHAR(15),
  p_a_anr INT,
  p_geschlecht TINYINT(1)
)

BEGIN

  UPDATE p_personen, an_anbieter
    SET 
	  p_personen.p_pnr=p_pnr,
      p_personen.p_nachname=p_nachname,
	  p_personen.p_vorname=p_vorname,
	  p_personen.p_a_anr=p_a_anr,
	  p_personen.p_geschlecht=p_geschlecht
      -- Hier würden die Variablen der Tabelle an_anbieter geändert
      -- an_anbieter.columnName= variable
    WHERE p_personen.p_pnr = an_anbieter.an_p_pnr AND p_personen.p_pnr=p_pnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure an_f_removeAnbieter
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`an_f_removeAnbieter`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE an_f_removeAnbieter (
  IN
    p_pnr INT
  )

BEGIN

  -- hier muss noch der Fall ausgeschlossen werden, 
  -- das Kunde auch Anbieter ist
  -- und die Person gelöscht wird obwohl nur 
  -- der Anbiter oder Kunde zu löschen ist. 
  DELETE p_personen, an_anbieter
    FROM p_personen
      INNER JOIN an_anbieter
      ON p_personen.p_pnr = an_anbieter.an_p_pnr
    WHERE p_personen.p_pnr = p_pnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure s_f_addSaele
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`s_f_addSaele`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE s_f_addSaele (
  IN
  s_snr INT,
  s_name VARCHAR(20),
  s_an_annr INT,
  s_an_p_pnr INT
  )

BEGIN
--  SET foreign_key_checks = 0;

  INSERT INTO s_saele ( s_snr, s_name, s_an_annr, s_an_p_pnr ) 
    VALUES (
	  s_snr,
      s_name,
      s_an_annr,
      s_an_p_pnr
    );
    
--  SET foreign_key_checks = 1;
    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure s_f_removeSaele
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`s_f_removeSaele`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE s_f_removeSaele (
  IN
  s_snr INT
  )

BEGIN

  DELETE s_saele
    FROM s_saele
    WHERE s_saele.s_snr = s_snr;
    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure s_f_setSaeleAt
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`s_f_setSaeleAt`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE s_f_setSaeleAt (
  IN
  s_snr INT,
  s_name VARCHAR(20),
  s_an_annr INT,
  s_an_p_pnr INT
)

BEGIN

  UPDATE s_saele
    SET 
      s_saele.s_snr= s_snr,
      s_saele.s_name= s_name,
      s_saele.s_an_annr= s_an_annr,
      s_saele.s_an_p_pnr=s_an_p_pnr
    WHERE 
      s_saele.s_snr=s_snr AND
      s_saele.s_an_annr=s_an_annr
  ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ka_f_addKategorien
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`ka_f_addKategorien`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `ka_f_addKategorien` (
  `ka_kaid` CHAR(5),
  `ka_bezeichnung` VARCHAR(10),
  `ka_preis` DECIMAL
)
BEGIN
  -- SET foreign_key_checks = 0;

  INSERT INTO ka_kategorien (
    ka_kaid,
    ka_bezeichnung,
    ka_preis
  ) 
    VALUES (
      ka_kaid,
      ka_bezeichnung,
      ka_preis
    );
    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ka_f_removeKategorien
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`ka_f_removeKategorien`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `ka_f_removeKategorien` (
  IN
    ka_kaid CHAR(5)
)
BEGIN

  DELETE ka_kategorien
    FROM ka_kategorien
    WHERE ka_kategorien.ka_kaid = ka_kaid;
    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ka_f_setKategorienAt
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`ka_f_setKategorienAt`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `ka_f_setKategorienAt` (
  IN
  ka_kaid CHAR(5),
  ka_bezeichnung VARCHAR(10),
  ka_preis DECIMAL
)
BEGIN

  UPDATE ka_kategorien
    SET 
      ka_kategorien.ka_kaid=ka_kaid,
      ka_kategorien.ka_bezeichnung=ka_bezeichnung,
	  ka_kategorien.ka_preis=ka_preis
    WHERE ka_kategorien.ka_kaid=ka_kaid
  ;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sit_f_addSitzplaetze
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`sit_f_addSitzplaetze`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `sit_f_addSitzplaetze` (
  IN
  sit_reihe INT,
  sit_sitnr INT,
  sit_s_snr INT,
  sit_ka_kaid CHAR(5)
)

BEGIN
--  SET foreign_key_checks = 0;

  INSERT INTO sit_sitzplaetze (
    sit_reihe,
    sit_sitnr,
    sit_s_snr,
    sit_ka_kaid
  ) 
    VALUES (
      sit_reihe,
      sit_sitnr,
      sit_s_snr,
      sit_ka_kaid
    );
    
--  SET foreign_key_checks = 1;
    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sit_f_setSitzplaetzeAt
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`sit_f_setSitzplaetzeAt`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `sit_f_setSitzplaetzeAt` (
  IN
  sit_reihe INT,
  sit_sitnr INT,
  sit_s_snr INT,
  sit_ka_kaid CHAR(5)
)

BEGIN

  UPDATE sit_sitzplaetze
    SET 
      sit_sitzplaetze.sit_reihe=sit_reihe,
      sit_sitzplaetze.sit_sitnr=sit_sitnr,
      sit_sitzplaetze.sit_s_snr=sit_s_snr,
      sit_sitzplaetze.sit_ka_kaid=sit_ka_kaid
    WHERE 
      sit_sitzplaetze.sit_reihe=sit_reihe AND
      sit_sitzplaetze.sit_sitnr=sit_sitnr AND
      sit_sitzplaetze.sit_s_snr=sit_s_snr
  ;
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sit_f_removeSitzplaetze
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`sit_f_removeSitzplaetze`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `sit_f_removeSitzplaetze` (
  IN
    sit_reihe INT,
    sit_sitnr INT,
    sit_s_snr INT
)

BEGIN

  DELETE sit_sitzplaetze
    FROM sit_sitzplaetze
    WHERE      
      sit_sitzplaetze.sit_reihe=sit_reihe AND
      sit_sitzplaetze.sit_sitnr=sit_sitnr AND
      sit_sitzplaetze.sit_s_snr=sit_s_snr
    ;    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure an_f_addAnbieter
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`an_f_addAnbieter`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE an_f_addAnbieter (
  IN
  p_pnr INT,
  p_nachname VARCHAR(20),
  p_vorname VARCHAR(15),
  p_a_anr INT,
  p_geschlecht TINYINT(1)
)

BEGIN
  SET foreign_key_checks = 0;

  INSERT INTO p_personen (
    p_pnr, 
    p_nachname, 
    p_vorname, 
    p_a_anr, 
    p_geschlecht
  ) 
    VALUES (
	  p_pnr,
	  p_nachname,
	  p_vorname,
	  p_a_anr,
	  p_geschlecht
    );
    
  INSERT INTO an_anbieter (
    an_p_pnr
  ) 
    VALUES (
	  p_pnr
    );
  SET foreign_key_checks = 1;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure st_f_setStueckeAt
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`st_f_setStueckeAt`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE st_f_setStueckeAt (
  IN
    st_titel VARCHAR(30),
    st_regisseur VARCHAR(15),
    st_g_gid CHAR(3)
  )

BEGIN

  UPDATE st_stuecke
    SET 
      st_stuecke.st_titel=st_titel,
      st_stuecke.st_regisseur=st_regisseur,
      st_stuecke.st_g_gid=st_g_gid
    WHERE st_stuecke.st_titel=st_titel
  ;
  
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure st_f_removeStuecke
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`st_f_removeStuecke`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE st_f_removeStuecke (
  IN
    st_titel VARCHAR(30)
)

BEGIN

  DELETE st_stuecke
    FROM st_stuecke
    WHERE st_stuecke.st_titel = st_titel
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure v_f_addVorstellungen
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`v_f_addVorstellungen`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE v_f_addVorstellungen (
  IN
    v_vnr INT,
    v_st_titel VARCHAR(30),
    v_s_snr INT,
    v_s_an_annr INT,
    v_datum DATE,
    v_beginn CHAR(5),
    v_ende CHAR(5)
)

BEGIN
--  SET foreign_key_checks = 0;

  INSERT INTO v_vorstellungen(
    v_vnr,
    v_st_titel,
    v_s_snr,
    v_s_an_annr,
    v_datum,
    v_beginn,
    v_ende
  ) 
    VALUES (
      v_vnr,
      v_st_titel,
      v_s_snr,
      v_s_an_annr,
      v_datum,
      v_beginn,
      v_ende
    );
    
--  SET foreign_key_checks = 1;
    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure v_f_setVorstellungenAt
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`v_f_setVorstellungenAt`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE v_f_setVorstellungenAt (
  IN
    v_vnr INT,
    v_st_titel VARCHAR(30),
    v_s_snr INT,
    v_s_an_annr INT,
    v_datum DATE,
    v_beginn CHAR(5),
    v_ende CHAR(5)
)

BEGIN

  UPDATE v_vorstellungen
    SET 
    v_vorstellungen.v_vnr=v_vnr,
    v_vorstellungen.v_st_titel=v_st_titel,
    v_vorstellungen.v_s_snr=v_s_snr,
    v_vorstellungen.v_s_an_annr=v_s_an_annr,
    v_vorstellungen.v_datum=v_datum,
    v_vorstellungen.v_beginn=v_beginn,
    v_vorstellungen.v_ende=v_ende    
    WHERE v_vorstellungen.v_vnr=v_vnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure v_f_removeVorstellungen
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`v_f_removeVorstellungen`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE v_f_removeVorstellungen (
  IN
    v_vnr INT
)

BEGIN

  DELETE v_vorstellungen
    FROM v_vorstellungen
    WHERE v_vorstellungen.v_vnr=v_vnr;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure k_f_addKunden
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`k_f_addKunden`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE k_f_addKunden (
  IN
  p_pnr INT,
  p_nachname VARCHAR(20),
  p_vorname VARCHAR(15),
  p_a_anr INT,
  p_geschlecht TINYINT(1),
  
  k_seit DATE,
  k_status TINYINT(1),
  k_p_pnr INT
)

BEGIN
  SET foreign_key_checks = 0;

  INSERT INTO p_personen (
    p_pnr, 
    p_nachname, 
    p_vorname, 
    p_a_anr, 
    p_geschlecht
  ) 
    VALUES (
	  p_pnr,
	  p_nachname,
	  p_vorname,
	  p_a_anr,
	  p_geschlecht
    );
    
  INSERT INTO k_kunden (
    k_seit,
    k_status,
    k_p_pnr
  ) 
    VALUES (
      k_seit,
      k_status,
      k_p_pnr
    );
  SET foreign_key_checks = 1;
    
END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure k_f_setKundenAt
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`k_f_setKundenAt`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE k_f_setKundenAt (
  IN
  p_pnr INT,
  p_nachname VARCHAR(20),
  p_vorname VARCHAR(15),
  p_a_anr INT,
  p_geschlecht TINYINT(1),
  
  k_seit DATE,
  k_status TINYINT(1),
  k_p_pnr INT
)

BEGIN

  UPDATE p_personen, k_kunden
    SET 
	  p_personen.p_pnr=p_pnr,
      p_personen.p_nachname=p_nachname,
	  p_personen.p_vorname=p_vorname,
	  p_personen.p_a_anr=p_a_anr,
	  p_personen.p_geschlecht=p_geschlecht,

      k_kunden.k_seit=k_seit,
      k_kunden.k_status=k_status,
      k_kunden.k_p_pnr=k_p_pnr
      
    WHERE p_personen.p_pnr = k_kunden.k_p_pnr AND p_personen.p_pnr=p_pnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure k_f_removeKunden
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`k_f_removeKunden`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE k_f_removeKunden (
  IN
    p_pnr INT
  )

BEGIN
  -- hier muss noch der Fall ausgeschlossen werden, 
  -- das Kunde auch Anbieter ist
  -- und die Person gelöscht wird obwohl nur 
  -- der Anbiter oder Kunde zu löschen ist. 
  DELETE p_personen, k_kunden
    FROM p_personen
      INNER JOIN k_kunden
      ON p_personen.p_pnr = k_kunden.k_p_pnr
    WHERE p_personen.p_pnr = p_pnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure g_f_addGenre
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`g_f_addGenre`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE g_f_addGenre (
  IN
    g_gid CHAR(3),
    g_bezeichnung VARCHAR(20)
)

BEGIN
--  SET foreign_key_checks = 0;

  INSERT INTO g_genre (
    g_gid,
    g_bezeichnung
  ) 
    VALUES (
      g_gid,
      g_bezeichnung
    );
    
--  SET foreign_key_checks = 1;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure g_f_setGenreAt
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`g_f_setGenreAt`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE g_f_setGenreAt (
  g_gid CHAR(3),
  g_bezeichnung VARCHAR(20)
)

BEGIN

  UPDATE g_genre
    SET 
      g_genre.g_gid=g_gid,
      g_genre.g_bezeichnung=g_bezeichnung
    WHERE g_genre.g_gid=g_gid
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure g_f_removeGenre
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`g_f_removeGenre`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE g_f_removeGenre (
  IN
    g_gid CHAR(3)
  )

BEGIN

  DELETE g_genre
    FROM g_genre
    WHERE g_genre.g_gid = g_gid
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure i_f_addInteressen
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`i_f_addInteressen`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE i_f_addInteressen (
  IN
    i_g_gid CHAR(3),
    i_k_p_pnr INT
)

BEGIN
--  SET foreign_key_checks = 0;

  INSERT INTO i_interessen (
    i_g_gid,
    i_k_p_pnr
  ) 
    VALUES (
      i_g_gid,
      i_k_p_pnr
    );
    
--  SET foreign_key_checks = 1;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure i_f_setInteressenAt
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`i_f_setInteressenAt`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE i_f_setInteressenAt (
  IN
    i_g_gid CHAR(3),
    i_k_p_pnr INT
)

BEGIN

  UPDATE i_interessen
    SET 
      i_interessen.i_g_gid=i_g_gid,
      i_interessen.i_k_p_pnr=i_k_p_pnr
    WHERE 
      i_interessen.i_g_gid=i_g_gid AND
      i_interessen.i_k_p_pnr=i_k_p_pnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure i_f_removeInteressen
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`i_f_removeInteressen`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE i_f_removeInteressen (
  IN
    i_g_gid CHAR(3),
    i_k_p_pnr INT
)

BEGIN

  DELETE i_interessen
    FROM i_interessen
    WHERE 
      i_interessen.i_g_gid=i_g_gid AND
      i_interessen.i_k_p_pnr=i_k_p_pnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure k_f_getItemKunden
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`k_f_getItemKunden`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE k_f_getItemKunden (
  IN
  p_pnr INT
)

BEGIN

  SELECT
	  p_personen.p_pnr,
      p_personen.p_nachname,
	  p_personen.p_vorname,
	  p_personen.p_a_anr,
	  p_personen.p_geschlecht,

      k_kunden.k_seit,
      k_kunden.k_status,
      k_kunden.k_p_pnr
      
    FROM p_personen, k_kunden
    WHERE k_kunden.k_p_pnr=p_pnr AND p_personen.p_pnr=p_pnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure k_f_getItemsKunden
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`k_f_getItemsKunden`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE k_f_getItemsKunden (
)

BEGIN

  SELECT
	  p_personen.p_pnr,
      p_personen.p_nachname,
	  p_personen.p_vorname,
	  p_personen.p_a_anr,
	  p_personen.p_geschlecht,

      k_kunden.k_seit,
      k_kunden.k_status,
      k_kunden.k_p_pnr
      
    FROM p_personen, k_kunden
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure an_f_getItemAnbieter
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`an_f_getItemAnbieter`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE an_f_getItemAnbieter (
  IN
  p_pnr INT
)

BEGIN

  SELECT 
	  p_personen.p_pnr,
      p_personen.p_nachname,
	  p_personen.p_vorname,
	  p_personen.p_a_anr,
	  p_personen.p_geschlecht
	FROM p_personen, an_anbieter
    WHERE an_anbieter.an_p_pnr=p_pnr AND p_personen.p_pnr=p_pnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure an_f_getItemsAnbieter
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`an_f_getItemsAnbieter`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE an_f_getItemsAnbieter (
)

BEGIN

  SELECT 
	  p_personen.p_pnr,
      p_personen.p_nachname,
	  p_personen.p_vorname,
	  p_personen.p_a_anr,
	  p_personen.p_geschlecht
	FROM p_personen, an_anbieter
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure g_f_getItemGenre
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`g_f_getItemGenre`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE g_f_getItemGenre (
  g_gid CHAR(3)
)

BEGIN

  SELECT
      g_genre.g_gid,
      g_genre.g_bezeichnung
	FROM g_genre
    WHERE g_genre.g_gid=g_gid
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure g_f_getItemsGenre
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`g_f_getItemsGenre`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE g_f_getItemsGenre (
)

BEGIN

  SELECT
      g_genre.g_gid,
      g_genre.g_bezeichnung
	FROM g_genre
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure i_f_getItemInteressen
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`i_f_getItemInteressen`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE i_f_getItemInteressen (
  IN
    i_g_gid CHAR(3),
    i_k_p_pnr INT
)

BEGIN

  SELECT
      i_interessen.i_g_gid,
      i_interessen.i_k_p_pnr
	FROM i_interessen
    WHERE 
      i_interessen.i_g_gid=i_g_gid AND
      i_interessen.i_k_p_pnr=i_k_p_pnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure i_f_getItemsInteressen
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`i_f_getItemsInteressen`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE i_f_getItemsInteressen (
)

BEGIN

  SELECT
      i_interessen.i_g_gid,
      i_interessen.i_k_p_pnr
	FROM i_interessen
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ka_f_getItemsKategorien
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`ka_f_getItemsKategorien`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `ka_f_getItemsKategorien` (
)
BEGIN

  SELECT 
      ka_kategorien.ka_kaid,
      ka_kategorien.ka_bezeichnung,
	  ka_kategorien.ka_preis
    FROM ka_kategorien
  ;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure ka_f_getItemKategorien
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`ka_f_getItemKategorien`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `ka_f_getItemKategorien` (
  IN
  ka_kaid CHAR(5)
)
BEGIN

  SELECT 
      ka_kategorien.ka_kaid,
      ka_kategorien.ka_bezeichnung,
	  ka_kategorien.ka_preis
    FROM ka_kategorien
    WHERE ka_kategorien.ka_kaid=ka_kaid
  ;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure s_f_getItemsSaele
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`s_f_getItemsSaele`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE s_f_getItemsSaele (
)

BEGIN

  SELECT 
      s_saele.s_snr,
      s_saele.s_name,
      s_saele.s_an_annr,
      s_saele.s_an_p_pnr
	FROM s_saele
  ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure s_f_getItemSaele
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`s_f_getItemSaele`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE s_f_getItemSaele (
  IN
  s_snr INT,
  s_an_annr INT
)

BEGIN

  SELECT 
      s_saele.s_snr,
      s_saele.s_name,
      s_saele.s_an_annr,
      s_saele.s_an_p_pnr
	FROM s_saele
    WHERE 
      s_saele.s_snr=s_snr AND
      s_saele.s_an_annr=s_an_annr
  ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sit_f_getItemSitzplaetze
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`sit_f_getItemSitzplaetze`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `sit_f_getItemSitzplaetze` (
  IN
  sit_reihe INT,
  sit_sitnr INT,
  sit_s_snr INT
)

BEGIN

  SELECT 
      sit_sitzplaetze.sit_reihe,
      sit_sitzplaetze.sit_sitnr,
      sit_sitzplaetze.sit_s_snr,
      sit_sitzplaetze.sit_ka_kaid
    FROM sit_sitzplaetze
    WHERE 
      sit_sitzplaetze.sit_reihe=sit_reihe AND
      sit_sitzplaetze.sit_sitnr=sit_sitnr AND
      sit_sitzplaetze.sit_s_snr=sit_s_snr
  ;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure sit_f_getItemsSitzplaetze
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`sit_f_getItemsSitzplaetze`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE `sit_f_getItemsSitzplaetze` (
)

BEGIN

  SELECT 
      sit_sitzplaetze.sit_reihe,
      sit_sitzplaetze.sit_sitnr,
      sit_sitzplaetze.sit_s_snr,
      sit_sitzplaetze.sit_ka_kaid
    FROM sit_sitzplaetze
  ;

END
$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure st_f_getItemStuecke
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`st_f_getItemStuecke`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE st_f_getItemStuecke (
  IN
    st_titel VARCHAR(30)
  )

BEGIN

  SELECT
      st_stuecke.st_titel,
      st_stuecke.st_regisseur,
      st_stuecke.st_g_gid
	FROM st_stuecke
    WHERE st_stuecke.st_titel=st_titel
  ;
  
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure st_f_getItemsStuecke
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`st_f_getItemsStuecke`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE st_f_getItemsStuecke (
)

BEGIN

  SELECT
      st_stuecke.st_titel,
      st_stuecke.st_regisseur,
      st_stuecke.st_g_gid
	FROM st_stuecke
  ;
  
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure v_f_getItemVorstellungen
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`v_f_getItemVorstellungen`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE v_f_getItemVorstellungen (
  IN
    v_vnr INT
)

BEGIN

  SELECT
    v_vorstellungen.v_vnr,
    v_vorstellungen.v_st_titel,
    v_vorstellungen.v_s_snr,
    v_vorstellungen.v_s_an_annr,
    v_vorstellungen.v_datum,
    v_vorstellungen.v_beginn,
    v_vorstellungen.v_ende
    FROM v_vorstellungen
    WHERE v_vorstellungen.v_vnr=v_vnr
  ;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure v_f_getItemsVorstellungen
-- -----------------------------------------------------

USE `mondhaus`;
DROP procedure IF EXISTS `mondhaus`.`v_f_getItemsVorstellungen`;

DELIMITER $$
USE `mondhaus`$$
CREATE PROCEDURE v_f_getItemsVorstellungen (
)

BEGIN

  SELECT
    v_vorstellungen.v_vnr,
    v_vorstellungen.v_st_titel,
    v_vorstellungen.v_s_snr,
    v_vorstellungen.v_s_an_annr,
    v_vorstellungen.v_datum,
    v_vorstellungen.v_beginn,
    v_vorstellungen.v_ende
    FROM v_vorstellungen
  ;
    
END$$

DELIMITER ;
SET SQL_MODE = '';
GRANT USAGE ON *.* TO mondhausadmin;
 DROP USER mondhausadmin;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'mondhausadmin' IDENTIFIED BY 'mond€pass';

GRANT ALL ON `mondhaus`.* TO 'mondhausadmin';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
